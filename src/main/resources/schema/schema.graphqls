type Query {
    orders(orderId: String): [Order]
    ordersByClientId(clientId: String): [Order]   # Новый запрос для получения заказов по clientId
    ordersByMasterId(masterId: String): [Order]   # Новый запрос для получения заказов по masterId
    ordersByClientIdAndMasterId(clientId: String, masterId: String): [Order]  # Новый запрос для получения заказов по clientId и masterId
    ordersByStatus(status: StatusType): [Order]   # Новый запрос для получения заказов по статусу
    clients(clientId: String): [Client]
    masters(masterId: String): [Master]
    parts(partId: String): [Part]  # Запрос для деталей
}

type Mutation {
    # Order mutations
    addOrder(description: String!, status: StatusType!, client: String, master: String): Order
    updateOrderStatus(id: ID!, status: StatusType!): Order
    assignMaster(id: ID!, masterId: String!): Order
    assignClient(id: ID!, clientId: String!): Order
    deleteOrder(id: ID!): String

    # Client mutations
    addClient(firstName: String!, phoneNumber: String!, email: String!): Client
    updateClientName(id: ID!, name: String!): Client
    updateClientPhone(id: ID!, phoneNumber: String!): Client
    updateClientEmail(id: ID!, email: String!): Client
    deleteClient(id: ID!): String

    # Master mutations
    addMaster(firstName: String!, phoneNumber: String!, specialization: SpecializationType!): Master
    updateMasterName(id: String!, name: String!): Master
    updateMasterPhone(id: String!, phone: String!): Master
    updateMasterSpecialization(id: String!, specialization: SpecializationType!): Master
    deleteMaster(id: String!): String

    # Part mutations
    addPart(name: String!, quantity: Int!, price: Float!): Part
    updatePartName(id: String!, name: String!): Part
    updatePartQuantity(id: String!, quantity: Int!): Part
    updatePartPrice(id: String!, price: Float!): Part
    deletePart(id: String!): String
}

type Order {
    id: ID
    description: String
    status: StatusType
    client: String
    master: String
}

type Part {
    id: ID
    name: String
    quantity: Int
    price: Float
}

type Client {
    id: ID
    firstName: String
    phoneNumber: String
    email: String
}

type Master {
    id: ID
    firstName: String
    phoneNumber: String
    specialization: SpecializationType
}

input MasterInput {
    firstName: String!
    phoneNumber: String!
    specialization: SpecializationType!
}

enum SpecializationType {
    PHONES        # Телефоны
    COMPUTERS     # Компьютеры
    TELEVISIONS   # Телевизоры
    APPLIANCES    # Бытовая техника
    UNIVERSAL     # Универсальная специализация
}

enum StatusType {
    PROCESSING    # Обрабатывается
    ACCEPTED      # Принят
    CANCELLED     # Отменен
    READY         # Готов
}
